# Предположим, мы, хотим определить класс для хранения  координат точек на плоскости

class Point: # Со стандартом PEP8 имя класса принято начинать с заглавной буквы!!!!!!
    color = 'red' #Первый атрибут # теперь в теле класса необходимо прописать отрибут(ы)!!!
    circle = 2 # Второй атрибут
# теперь создадим экземплляры класса Point через консоль
a = Point()
b = Point()
# Теперь пропишем точки координат в пространстве имен
a.x = 1
a.y = 2
b.x = 10
b.y = 20


# Теперь добавим в экземплляр класса (a) атрибут color
a.color = 'green'
# Создадим ещё атрибуты
Point.type_pt = 'disk'
setattr(Point, 'prop', 1)
# Теперь изменим атрибут type_pt
setattr(Point, 'type_pt', 'square')
# Теперь выведим значение атрибута
getattr(Point, 'color') # 'black'
# Удаление атрибута
del Point.prop
# Проверка на то существует ли атрибут или нет
hasattr(Point, 'prop') # False мы уже удалили этот атрибут из класса
# Ещё один способ удалять атрибуты
delattr(Point, 'color')

# Первая строка в классе автоматически считается его описанием например так:
class Point:
    'Класс для представления координат точек на плоскости'
    x = 1
    y = 1
# Итак, мы определили класс с именем Point для представления координат точек на плоскости.
# Это проект, чертеж, и чтобы по этому проекту создать экземпляр данного класса, следует записать так:
pt = Point()
# Тут нам нужно чётко понимать что такое переменная tp - это по сути ссылка на класс атрибуты Point, она является
# как пространство имён с именем pt.В этом пространстве есть две переменные x и y, которые берутся непосредсвенно из класса
# Point.
# Давайте изменим переменную х в самом классе:
Point.x = 100
# то это приведет к изменению значения и в пространстве имен pt:
print(pt.x, pt.y)
# Но при этом, pt и Point-это совершенно разные объекты, и их id различаются:
print(id(pt), id(Point), sep='\n')# 1705915461584
                                  # 1705910753504
# Тоесть операция pt = Point() действительно создаёт новый объкт(по существу, новое пространство имён) с габором данных
# которые были прописаны в классе Point
# И если мы будем создавать другие экземплярыэтого же класса и так далее все они будут ссылатся на независимые объекты,
# но переменные x и y в них,будут также братся из класса Point
pt2 = Point()
# Далее, смотрите, если после создания экземпляра написать вот такие строчки:
pt.x = 5
pt.y = 10
# то в пространстве имён pt будут созданы свои переменные x и y:
print(pt.x, Point.x) # 5, 100
print(Point.x, Point.y) # 100, 1
print(pt.x, pt.y) # 5, 10
print(pt.__dict__) # {'x': 5, 'y': 10}
print(Point.__dict__) # {'__module__': '__main__', '__doc__': 'Класс для представления координат точек на плоскости',
                      # 'x': 100, 'y': 1, '__dict__': <attribute '__dict__' of 'Point' objects>, '__weakref__': <attribute '__weakref__' of 'Point' objects>}
# В терминологии ООП переменные в нутри класса или экземпляра называются АТРИБУТЫ или (СВОЙСТВАМИ)
# С атрибутами экзепляров класса можно работать через такие функции:
# getattr(obj,name[,default]) - возвращает значение атрибута обьекта
# hasattr(obj, name) - проверяет на наличие атрибута name в obj
# setattr(obj, name, value) - задаёт значение атрибута(если атрибут несуществует, то он создаётся)
# delattr(obj, name) - удаляет атрибут с именем name.
print(getattr(pt, 'x')) # 5
print(hasattr(pt, 'z')) # False
setattr(pt, 'z', 7)
print(pt.__dict__) # {'x': 5, 'y': 10, 'z': 7}
delattr(pt, 'z')
print(pt.__dict__) # {'x': 5, 'y': 10}
# Эти же операции можно делать и с сомим классом Point:
setattr(Point, 'z', 7)
print(Point.__dict__)#
Point.z = 100
print(getattr(Point, 'z')) # 100
# И в заключении рассмотрим весьма полезную функцию isinstance(), которая позволяет определить принадлежность экземпляра
# к тому или иному классу:
print(isinstance(pt, Point)) # True
class Point3D:
    pass
# то получим значение False, т.к. pt – не экземпляр класса Point3D.
print(isinstance(pt, Point3D)) # False

# Понятие класса, экземпляра класса и как они создаются. Понятие атрибутов, затронули некоторые встроенные переменные:
#
# __doc__ –  содержит строку с описанием класса;
# __name__ –  содержит строку с именем класса;
# __dict__ –  содержит набор атрибутов экземпляра класса.


print(Point.__doc__) # Класс для представления координат точек на плоскости
# Эта команда возвращает имя класса
print(Point.__name__) # Point
# Полный набор данных класса или экземпляра можно увидеть с помощью функции dir:
print(dir(pt))